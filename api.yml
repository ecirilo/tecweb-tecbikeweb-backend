swagger: "2.0"
info:
  description: "APP - TecBikeWeb - Sistema desenvolvido ao longo da disciplinad e TecWeb - UFSJ"
  version: "1.0.0"
  title: "TecBikeWeb"
  contact:
    email: "elder@ufsj.edu.br"
host: "tecbikeweb.ccomp.ufsj.edu.br"
basePath: "/v1"
tags:
- name: "bicicleta"
  description: "Tudo sobre as bicicletas"
- name: "locadora"
  description: "Acesso a Locadora"
- name: "usuario"
  description: "Operações para gerência de usuários"
schemes:
- "http"
paths:
  /bike:
    post:
      tags:
      - "bicicleta"
      summary: "Adiciona uma nova bicicleta na locadora"
      operationId: "addBike"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto bicileta a ser adicionada na locadora"
        required: true
        schema:
          $ref: "#/definitions/Bike"
      responses:
        "405":
          description: "Invalid input"
  /bike/{bikeId}:
    get:
      tags:
      - "bicicleta"
      summary: "Busca bicicleta pelo ID"
      operationId: "getBikeById"
      produces:
      - "application/json"
      parameters:
      - name: "bikeId"
        in: "path"
        description: "ID of bike to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bike"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Bike not found"
    put:
      tags:
      - "bicicleta"
      summary: "UAtualiza uma bicicleta na locadora"
      operationId: "updateBikeById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "bikeId"
        in: "path"
        description: "ID that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated bike object"
        required: true
        schema:
          $ref: "#/definitions/Bike"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Bike not found"
    delete:
      tags:
      - "bicicleta"
      summary: "Apaga uma bicileta"
      description: ""
      operationId: "deleteBike"
      produces:
      - "application/json"
      parameters:
      - name: "bikeId"
        in: "path"
        description: "Bike id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Bike not found"
  /stora/rental:
    get:
      tags:
      - "locadora"
      summary: "Retorna os alugueis"
      operationId: "getRental"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
  /store/rental:
    post:
      tags:
      - "locadora"
      summary: "Faz um aluguel para uma bicicleta"
      description: ""
      operationId: "rental"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "data for rental the bike"
        required: true
        schema:
          $ref: "#/definitions/Rental"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Rental"
        "400":
          description: "Invalid Rental"
  /store/rental/{rentalId}:
    get:
      tags:
      - "locadora"
      summary: "Busca alugueis por ID"
      operationId: "getRentalById"
      produces:
      - "application/json"
      parameters:
      - name: "rentalId"
        in: "path"
        description: "ID of rental that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Rental"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Rental not found"
    delete:
      tags:
      - "locadora"
      summary: "Delete rental by ID"
      operationId: "deleteRental"
      produces:
      - "application/json"
      parameters:
      - name: "rentalId"
        in: "path"
        description: "ID of the rental that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Rental not found"
  /store/rental/findByUser:
    get:
      tags:
      - "locadora"
      summary: "Busca os alugueis por usuario"
      operationId: "findRentalByUser"
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: "query"
        description: "User to filter by"
        required: true
        items:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Rental"
        "400":
          description: "Invalid user name value"
  /user:
    post:
      tags:
      - "usuario"
      summary: "Create user"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "usuario"
      summary: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "usuario"
      summary: "Logs out current logged in user session"
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:
  Rental:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      bikeId:
        type: "integer"
        format: "int64"
      bookingDate:
        type: "string"
        format: "date-time"
      rentDate:
        type: "string"
        format: "date-time"
      returnDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Rentail Status"
        enum:
        - "booked"
        - "rented"
        - "returned"
      complete:
        type: "boolean"
        default: false
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
  Bike:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      marca:
        type: "string"
      modelo:
        type: "string"
      status:
        type: "string"
        description: "bike status in the store"
        enum:
        - "available"
        - "booked"
        - "rented"